/* 
 * API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using IO.Swagger.Api;
using IO.Swagger.Model;
using IO.Swagger.Client;
using System.Reflection;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing UserRole
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the model.
    /// </remarks>
    [TestFixture]
    public class UserRoleTests
    {
        private UserRole instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UserRole();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UserRole
        /// </summary>
        [Test]
        public void UserRoleInstanceTest()
        {
            Assert.IsInstanceOf<UserRole>(instance, "variable 'instance' is a UserRole");
        }

        /// <summary>
        /// Test the property 'Permissions'
        /// </summary>
        [Test]
        public void PermissionsTest()
        {
			var singlePermission = UserRole.PermissionsEnum.NUMBER_256;
			instance.Permissions = singlePermission;
			Assert.AreEqual(singlePermission, instance.Permissions);

			var first = UserRole.PermissionsEnum.NUMBER_1;
			var second = UserRole.PermissionsEnum.NUMBER_16;
			var other = UserRole.PermissionsEnum.NUMBER_32;
			var multiPermission = first | second;
			instance.Permissions = multiPermission;
			Assert.IsTrue((instance.Permissions & first) == first);
			Assert.IsTrue((instance.Permissions & second) == second);
			Assert.IsFalse((instance.Permissions & other) == other);
		}
        /// <summary>
        /// Test the property 'Game'
        /// </summary>
        [Test]
        public void GameTest()
        {
			var newGame = "NewGame";
			instance.Game = newGame;
			Assert.AreEqual(newGame, instance.Game);
        }

    }

}
