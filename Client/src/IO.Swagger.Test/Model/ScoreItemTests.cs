/* 
 * API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using IO.Swagger.Api;
using IO.Swagger.Model;
using IO.Swagger.Client;
using System.Reflection;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ScoreItem
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the model.
    /// </remarks>
    [TestFixture]
    public class ScoreItemTests
    {
        private ScoreItem instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ScoreItem();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ScoreItem
        /// </summary>
        [Test]
        public void ScoreItemInstanceTest()
        {
            Assert.IsInstanceOf<ScoreItem>(instance, "variable 'instance' is a ScoreItem");
        }

        /// <summary>
        /// Test the property 'Key'
        /// </summary>
        [Test]
        public void KeyTest()
        {
			var newKey = "newKey";
			instance.Key = newKey;
			Assert.AreEqual(newKey, instance.Key);
        }
        /// <summary>
        /// Test the property 'Game'
        /// </summary>
        [Test]
        public void GameTest()
        {
			var newGame = "newGame";
			instance.Game = newGame;
			Assert.AreEqual(newGame, instance.Game);
		}
        /// <summary>
        /// Test the property 'Version'
        /// </summary>
        [Test]
        public void VersionTest()
        {
			var newVersion = "newVersion";
			instance.Version = newVersion;
			Assert.AreEqual(newVersion, instance.Version);
		}
        /// <summary>
        /// Test the property 'Param'
        /// </summary>
        [Test]
        public void ParamTest()
        {
			var newParam = "newParam";
			instance.Param = newParam;
			Assert.AreEqual(newParam, instance.Param);
		}
        /// <summary>
        /// Test the property 'Score'
        /// </summary>
        [Test]
        public void ScoreTest()
        {
			var newScore = 999;
			instance.Score = newScore;
			Assert.AreEqual(newScore, instance.Score);
		}

    }

}
