/* 
 * API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing GameApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class GameApiTests
    {
        private GameApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new GameApi(Common.DefaultConfig);
			Common.Prepare();
		}

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
			Common.Cleanup();
		}

        /// <summary>
        /// Test an instance of GameApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf(typeof(GameApi), instance, "instance is a GameApi");
        }

        
        /// <summary>
        /// Test ApiGameByNameDelete
        /// </summary>
        [Test]
        public void ApiGameByNameDeleteTestWithRights()
        {
            string name = Common.GameName;
            string authorization = Common.AdminAuth;

			instance.ApiGameByNameDelete(name, authorization);

			var ex = Assert.Catch(() => instance.ApiGameByNameGet(name, authorization)) as ApiException;
			Assert.AreEqual(Common.NotFoundCode, ex.ErrorCode);
        }

		/// <summary>
		/// Test ApiGameByNameDelete
		/// </summary>
		[Test]
		public void ApiGameByNameDeleteTestWithNoRights()
		{
			string name = Common.GameName;
			string authorization = Common.UserAuth;
			string chechAuthorization = Common.AdminAuth;

			var ex = Assert.Catch(() => instance.ApiGameByNameDelete(name, authorization)) as ApiException;
			Assert.AreEqual(Common.ForbiddenCode, ex.ErrorCode);

			var game = instance.ApiGameByNameGet(name, chechAuthorization);
			Assert.IsNotNull(game);
		}

		/// <summary>
		/// Test ApiGameByNameDelete
		/// </summary>
		[Test]
		public void ApiGameByNameDeleteTestWithBadRights()
		{
			string name = Common.GameName;
			string authorization = Common.OtherAuth;
			string chechAuthorization = Common.AdminAuth;

			var ex = Assert.Catch(() => instance.ApiGameByNameDelete(name, authorization)) as ApiException;
			Assert.AreEqual(Common.NeedAuthCode, ex.ErrorCode);

			var game = instance.ApiGameByNameGet(name, chechAuthorization);
			Assert.IsNotNull(game);
		}

		/// <summary>
		/// Test ApiGameByNameGet
		/// </summary>
		[Test]
        public void ApiGameByNameGetTestWithRights()
        {
            string name = Common.GameName;
            string authorization = Common.AdminAuth;
            var game = instance.ApiGameByNameGet(name, authorization);
			Assert.AreEqual(Common.GameName, game.Name);
        }

		/// <summary>
		/// Test ApiGameByNameGet
		/// </summary>
		[Test]
		public void ApiGameByNameGetTestWithNoRights()
		{
			string name = Common.GameName;
			string authorization = Common.UserAuth;
			var ex = Assert.Catch(() => instance.ApiGameByNameGet(name, authorization)) as ApiException;
			Assert.AreEqual(Common.ForbiddenCode, ex.ErrorCode);
		}

		/// <summary>
		/// Test ApiGameByNameGet
		/// </summary>
		[Test]
		public void ApiGameByNameGetTestWithBadRights()
		{
			string name = Common.GameName;
			string authorization = Common.OtherAuth;
			var ex = Assert.Catch(() => instance.ApiGameByNameGet(name, authorization)) as ApiException;
			Assert.AreEqual(Common.NeedAuthCode, ex.ErrorCode);
		}
        
        /// <summary>
        /// Test ApiGameGet
        /// </summary>
        [Test]
        public void ApiGameGetTestWithRights()
        {
            string authorization = Common.AdminAuth;
            var response = instance.ApiGameGet(authorization);
            Assert.IsInstanceOf<List<Game>>(response, "response is List<Game>");
        }

		/// <summary>
		/// Test ApiGameGet
		/// </summary>
		[Test]
		public void ApiGameGetTestWithNoRights()
		{
			string authorization = Common.UserAuth;
			var ex = Assert.Catch(() => instance.ApiGameGet(authorization)) as ApiException;
			Assert.AreEqual(Common.ForbiddenCode, ex.ErrorCode);
		}

		/// <summary>
		/// Test ApiGameGet
		/// </summary>
		[Test]
		public void ApiGameGetTestWithBadRights()
		{
			string authorization = Common.OtherAuth;
			var ex = Assert.Catch(() => instance.ApiGameGet(authorization)) as ApiException;
			Assert.AreEqual(Common.NeedAuthCode, ex.ErrorCode);
		}

		/// <summary>
		/// Test ApiGamePost
		/// </summary>
		[Test]
        public void ApiGamePostTestWithRights()
        {
            string authorization = Common.AdminAuth;
			string newName = "NewGame";
			Game item = new Game(newName);

			instance.ApiGamePost(authorization, item);

			var game = instance.ApiGameByNameGet(newName, authorization);
			Assert.IsNotNull(game);
        }

		/// <summary>
		/// Test ApiGamePost
		/// </summary>
		[Test]
		public void ApiGamePostTestWithNoRights()
		{
			string authorization = Common.UserAuth;
			string chechAuthorization = Common.AdminAuth;
			string newName = "NewGame";
			Game item = new Game(newName);

			var ex1 = Assert.Catch(() => instance.ApiGamePost(authorization, item)) as ApiException;
			Assert.AreEqual(Common.ForbiddenCode, ex1.ErrorCode);

			var ex2 = Assert.Catch(() => instance.ApiGameByNameGet(newName, chechAuthorization)) as ApiException;
			Assert.AreEqual(Common.NotFoundCode, ex2.ErrorCode);
		}

		/// <summary>
		/// Test ApiGamePost
		/// </summary>
		[Test]
		public void ApiGamePostTestWithBadRights()
		{
			string authorization = Common.OtherAuth;
			string chechAuthorization = Common.AdminAuth;
			string newName = "NewGame";
			Game item = new Game(newName);

			var ex1 = Assert.Catch(() => instance.ApiGamePost(authorization, item)) as ApiException;
			Assert.AreEqual(Common.NeedAuthCode, ex1.ErrorCode);

			var ex2 = Assert.Catch(() => instance.ApiGameByNameGet(newName, chechAuthorization)) as ApiException;
			Assert.AreEqual(Common.NotFoundCode, ex2.ErrorCode);
		}
	}

}
