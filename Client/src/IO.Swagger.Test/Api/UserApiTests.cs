/* 
 * API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing UserApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class UserApiTests
    {
        private UserApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UserApi(Common.DefaultConfig);
			Common.Prepare();
		}

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
			Common.Cleanup();
		}

        /// <summary>
        /// Test an instance of UserApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf(typeof(UserApi), instance, "instance is a UserApi");
        }

        
        /// <summary>
        /// Test ApiUserByNameDelete
        /// </summary>
        [Test]
        public void ApiUserByNameDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string authorization = null;
            //instance.ApiUserByNameDelete(name, authorization);
            
        }
        
        /// <summary>
        /// Test ApiUserByNameGet
        /// </summary>
        [Test]
        public void ApiUserByNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string authorization = null;
            //instance.ApiUserByNameGet(name, authorization);
            
        }
        
        /// <summary>
        /// Test ApiUserByNamePatch
        /// </summary>
        [Test]
        public void ApiUserByNamePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string authorization = null;
            //User item = null;
            //instance.ApiUserByNamePatch(name, authorization, item);
            
        }
        
        /// <summary>
        /// Test ApiUserGet
        /// </summary>
        [Test]
        public void ApiUserGetTestWithRights()
        {
            string authorization = Common.AdminAuth;
            var response = instance.ApiUserGet(authorization);
            Assert.IsInstanceOf<List<User>> (response, "response is List<User>");
        }

		/// <summary>
		/// Test ApiUserGet
		/// </summary>
		[Test]
		public void ApiUserGetTestWithNoRights() {
			string authorization = Common.UserAuth;
			var ex = Assert.Catch(() => instance.ApiUserGet(authorization)) as ApiException;
			Assert.AreEqual(Common.ForbiddenCode, ex.ErrorCode);
		}

		/// <summary>
		/// Test ApiUserGet
		/// </summary>
		[Test]
		public void ApiUserGetTestWithBadAuth() {
			string authorization = Common.OtherAuth;
			var ex = Assert.Catch(() => instance.ApiUserGet(authorization)) as ApiException;
			Assert.AreEqual(Common.NeedAuthCode, ex.ErrorCode);
		}

		/// <summary>
		/// Test ApiUserPost
		/// </summary>
		[Test]
        public void ApiUserPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //User item = null;
            //instance.ApiUserPost(authorization, item);
            
        }
        
    }

}
