/* 
 * API V1
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing UserApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class UserApiTests
    {
        private UserApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UserApi(Common.DefaultConfig);
			Common.Prepare();
		}

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
			Common.Cleanup();
		}

        /// <summary>
        /// Test an instance of UserApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf(typeof(UserApi), instance, "instance is a UserApi");
        }

        
        /// <summary>
        /// Test ApiUserByNameDelete
        /// </summary>
        [Test]
        public void ApiUserByNameDeleteTestWithRights()
        {
            string name = Common.UserName;
            string authorization = Common.AdminAuth;

			Assert.IsNotNull(instance.ApiUserByNameGet(name, authorization));

			instance.ApiUserByNameDelete(name, authorization);

			Assert.IsNull(instance.ApiUserByNameGet(name, authorization));
        }

		/// <summary>
		/// Test ApiUserByNameDelete
		/// </summary>
		[Test]
		public void ApiUserByNameDeleteTestWithNoRights() {
			string name = Common.UserName;
			string checkAuthorization = Common.AdminAuth;
			string authorization = Common.UserName;

			Assert.IsNotNull(instance.ApiUserByNameGet(name, checkAuthorization));

			var ex = Assert.Catch(() => instance.ApiUserByNameDelete(name, authorization)) as ApiException;
			Assert.AreEqual(Common.ForbiddenCode, ex.ErrorCode);

			Assert.IsNotNull(instance.ApiUserByNameGet(name, checkAuthorization));
		}

		/// <summary>
		/// Test ApiUserByNameDelete
		/// </summary>
		[Test]
		public void ApiUserByNameDeleteTestWithBadRights() {
			string name = Common.UserName;
			string checkAuthorization = Common.AdminAuth;
			string authorization = Common.OtherAuth;

			Assert.IsNotNull(instance.ApiUserByNameGet(name, checkAuthorization));

			var ex = Assert.Catch(() => instance.ApiUserByNameDelete(name, authorization)) as ApiException;
			Assert.AreEqual(Common.NeedAuthCode, ex.ErrorCode);

			Assert.IsNotNull(instance.ApiUserByNameGet(name, checkAuthorization));
		}

		/// <summary>
		/// Test ApiUserByNameGet
		/// </summary>
		[Test]
        public void ApiUserByNameGetTestWithRights()
        {
            string name = Common.UserName;
            string authorization = Common.AdminAuth;
            var user = instance.ApiUserByNameGet(name, authorization);
			Assert.AreEqual(Common.UserName, user.Name);
        }

		/// <summary>
		/// Test ApiUserByNameGet
		/// </summary>
		[Test]
		public void ApiUserByNameGetTestWithNoRights() {
			string name = Common.UserName;
			string authorization = Common.OtherAuth;
			var ex = Assert.Catch(() => instance.ApiUserByNameGet(name, authorization)) as ApiException;
			Assert.AreEqual(Common.NeedAuthCode, ex.ErrorCode);
		}

		/// <summary>
		/// Test ApiUserByNameGet
		/// </summary>
		[Test]
		public void ApiUserByNameGetTestWithBadRights() {
			string name = Common.UserName;
			string authorization = Common.UserAuth;
			var ex = Assert.Catch(() => instance.ApiUserByNameGet(name, authorization)) as ApiException;
			Assert.AreEqual(Common.ForbiddenCode, ex.ErrorCode);
		}

		/// <summary>
		/// Test ApiUserByNamePatch
		/// </summary>
		[Test]
        public void ApiUserByNamePatchTestWithRights()
        {
            string name = Common.UserName;
            string authorization = Common.AdminAuth;
			var newName = name + "123";
            User item = new User(newName, Common.UserName);
            instance.ApiUserByNamePatch(name, authorization, item);
        }

		/// <summary>
		/// Test ApiUserByNamePatch
		/// </summary>
		[Test]
		public void ApiUserByNamePatchTestWithNoRights() {
			string name = Common.UserName;
			string authorization = Common.UserName;
			var newName = name + "123";
			User item = new User(newName, Common.UserName);
			var ex = Assert.Catch(() => instance.ApiUserByNamePatch(name, authorization, item)) as ApiException;
			Assert.AreEqual(Common.NeedAuthCode, ex.ErrorCode);
		}

		/// <summary>
		/// Test ApiUserByNamePatch
		/// </summary>
		[Test]
		public void ApiUserByNamePatchTestWithBadRights() {
			string name = Common.UserName;
			string authorization = Common.OtherAuth;
			var newName = name + "123";
			User item = new User(newName, Common.UserName);
			var ex = Assert.Catch(() => instance.ApiUserByNamePatch(name, authorization, item)) as ApiException;
			Assert.AreEqual(Common.ForbiddenCode, ex.ErrorCode);
		}

		/// <summary>
		/// Test ApiUserGet
		/// </summary>
		[Test]
        public void ApiUserGetTestWithRights()
        {
            string authorization = Common.AdminAuth;
            var response = instance.ApiUserGet(authorization);
            Assert.IsInstanceOf<List<User>> (response, "response is List<User>");
        }

		/// <summary>
		/// Test ApiUserGet
		/// </summary>
		[Test]
		public void ApiUserGetTestWithNoRights() {
			string authorization = Common.UserAuth;
			var ex = Assert.Catch(() => instance.ApiUserGet(authorization)) as ApiException;
			Assert.AreEqual(Common.ForbiddenCode, ex.ErrorCode);
		}

		/// <summary>
		/// Test ApiUserGet
		/// </summary>
		[Test]
		public void ApiUserGetTestWithBadAuth() {
			string authorization = Common.OtherAuth;
			var ex = Assert.Catch(() => instance.ApiUserGet(authorization)) as ApiException;
			Assert.AreEqual(Common.NeedAuthCode, ex.ErrorCode);
		}

		/// <summary>
		/// Test ApiUserPost
		/// </summary>
		[Test]
        public void ApiUserPostTestWithRights()
        {
            string authorization = Common.AdminAuth;
			var userName = "NewUser";
            User item = new User(userName, userName);

            instance.ApiUserPost(authorization, item);

			Assert.IsNotNull(instance.ApiUserByNameGet(userName, authorization));
        }

		/// <summary>
		/// Test ApiUserPost
		/// </summary>
		[Test]
		public void ApiUserPostTestWithNoRights() {
			string authorization = Common.UserAuth;
			string checkAuthorization = Common.AdminAuth;
			var userName = "NewUser";
			User item = new User(userName, userName);

			var ex = Assert.Catch(() => instance.ApiUserPost(authorization, item)) as ApiException;
			Assert.AreEqual(Common.ForbiddenCode, ex.ErrorCode);

			Assert.IsNull(instance.ApiUserByNameGet(userName, checkAuthorization));
		}

		/// <summary>
		/// Test ApiUserPost
		/// </summary>
		[Test]
		public void ApiUserPostTestWithBadRights() {
			string authorization = Common.OtherAuth;
			string checkAuthorization = Common.AdminAuth;
			var userName = "NewUser";
			User item = new User(userName, userName);

			var ex = Assert.Catch(() => instance.ApiUserPost(authorization, item)) as ApiException;
			Assert.AreEqual(Common.NeedAuthCode, ex.ErrorCode);

			Assert.IsNull(instance.ApiUserByNameGet(userName, checkAuthorization));
		}

		/// <summary>
		/// Test ApiUserPost
		/// </summary>
		[Test]
		public void ApiUserPostTestCheckNewUserWithNoRights() {
			string authorization = Common.AdminAuth;
			var userName = "NewUser";
			User item = new User(userName, userName);

			instance.ApiUserPost(authorization, item);

			Assert.IsNotNull(instance.ApiUserByNameGet(userName, authorization));

			var newUserAuth = Common.GetAuthHeader(userName, userName);

			var ex = Assert.Catch(() => instance.ApiUserGet(newUserAuth)) as ApiException;
			Assert.AreEqual(Common.ForbiddenCode, ex.ErrorCode);
		}

		/// <summary>
		/// Test ApiUserPost
		/// </summary>
		[Test]
		public void ApiUserPostTestCheckNewUserWithRights() {
			string authorization = Common.AdminAuth;
			var userName = "NewUser";
			var roles = new List<UserRole>() { new UserRole(UserRole.PermissionsEnum.NUMBER_8) };
			User item = new User(userName, userName, roles);

			instance.ApiUserPost(authorization, item);

			Assert.IsNotNull(instance.ApiUserByNameGet(userName, authorization));

			var newUserAuth = Common.GetAuthHeader(userName, userName);

			var ex = Assert.Catch(() => instance.ApiUserGet(newUserAuth)) as ApiException;
			Assert.AreEqual(Common.ForbiddenCode, ex.ErrorCode);
		}
	}

}
